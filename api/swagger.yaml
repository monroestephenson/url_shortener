openapi: 3.0.0
info:
  title: URL Shortener API
  description: A production-ready URL shortener service with Redis caching, MySQL storage, and Prometheus metrics
  version: 1.0.0

servers:
  - url: http://localhost:3000
    description: Local development server

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Error:
      type: object
      properties:
        message:
          type: string
        field:
          type: string
        code:
          type: string

    ShortURL:
      type: object
      properties:
        id:
          type: integer
        shortCode:
          type: string
        originalUrl:
          type: string
        accessCount:
          type: integer
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        userId:
          type: string

    CreateURLRequest:
      type: object
      required:
        - url
      properties:
        url:
          type: string
          format: uri
          example: https://www.example.com/very/long/url

    UpdateURLRequest:
      type: object
      required:
        - url
      properties:
        url:
          type: string
          format: uri
          example: https://www.example.com/updated/url

    AuthRequest:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
          example: user@example.com
        password:
          type: string
          format: password
          example: secretpassword

    AuthResponse:
      type: object
      properties:
        token:
          type: string
        user:
          type: object
          properties:
            id:
              type: integer
            username:
              type: string
            createdAt:
              type: string
              format: date-time
            updatedAt:
              type: string
              format: date-time

paths:
  /auth/signup:
    post:
      summary: Create a new user account
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthRequest'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: Invalid request
        '409':
          description: Username already exists

  /auth/login:
    post:
      summary: Login to get JWT token
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: Invalid credentials

  /api/shorten:
    post:
      summary: Create a short URL
      tags:
        - URLs
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateURLRequest'
      responses:
        '201':
          description: Short URL created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShortURL'
        '400':
          description: Invalid URL
        '401':
          description: Unauthorized
        '429':
          description: Rate limit exceeded

  /api/shorten/{shortCode}:
    get:
      summary: Get short URL details
      tags:
        - URLs
      security:
        - BearerAuth: []
      parameters:
        - name: shortCode
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Short URL details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShortURL'
        '404':
          description: Short URL not found

    put:
      summary: Update short URL
      tags:
        - URLs
      security:
        - BearerAuth: []
      parameters:
        - name: shortCode
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateURLRequest'
      responses:
        '200':
          description: URL updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShortURL'
        '404':
          description: Short URL not found

    delete:
      summary: Delete short URL
      tags:
        - URLs
      security:
        - BearerAuth: []
      parameters:
        - name: shortCode
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: URL deleted successfully
        '404':
          description: Short URL not found

  /api/shorten/{shortCode}/stats:
    get:
      summary: Get URL statistics
      tags:
        - Statistics
      security:
        - BearerAuth: []
      parameters:
        - name: shortCode
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: URL statistics
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShortURL'
        '404':
          description: Short URL not found

  /{shortCode}:
    get:
      summary: Redirect to original URL
      tags:
        - Redirect
      parameters:
        - name: shortCode
          in: path
          required: true
          schema:
            type: string
      responses:
        '301':
          description: Redirect to original URL
          headers:
            Location:
              schema:
                type: string
                format: uri
        '404':
          description: Short URL not found

  /metrics:
    get:
      summary: Get Prometheus metrics
      tags:
        - Monitoring
      responses:
        '200':
          description: Prometheus metrics in text format 